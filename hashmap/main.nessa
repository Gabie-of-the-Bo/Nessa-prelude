import interface Hashable from hash;
import fn hash from hash;
import fn { iterator, next, is_consumed, range } from range;

// Syntax definition

@doc(
    "Hash Map initialization syntax."
)
syntax hashmap_initialization from 
    "<" [s] Arg(<type>, ktype) [s] "," [s] Arg(<type>, vtype) [s] ">" [s] 
    "{" [s] 
        [{Arg(<expr>, keys) [s] ":" [s] Arg(<expr>, values) [s] "," [s]} Arg(<expr>, keys) [s] ":" [s] Arg(<expr>, values)] 
    [s] "}" 
{
    let res = hashmap<$ktype, $vtype>();

    @values.i {
        res.add($keys.i, $values.i);
    }
    
    return move(res);
}

// Class definition

@doc(
    "Hash Map class that works as an associative array."
)
class HashMap<V, K> {
    buckets: Array<Array<('V [Hashable], 'K)>>;
    num_elems: Int;
}

fn<K, V> init(map: @HashMap<'K [Hashable], 'V>, size: Int) {
    let _buckets = map.buckets();
    _buckets.reserve(*size);

    for i in range(0, *size) {
        _buckets.push(arr<('K, 'V)>());
    }
}

@doc(
    "Create empty Hash Map. Use this instead of HashMap's constructor.",
    "An empty Hash Map"
)
fn<K, V> hashmap() -> HashMap<'K [Hashable], 'V> {
    let res = HashMap(arr<Array<('K, 'V)>>(), 0);
    res.init(10);

    return move(res);
}

fn<K, V> rehash(map: @HashMap<'K [Hashable], 'V>) {
    let b = map.buckets();
    let size = b.len();

    let aux = HashMap(arr<Array<('K, 'V)>>(), 0);
    aux.init(size * 2);

    for bucket in map.buckets() {
        for elem in bucket {
            aux.add(move(elem.get_0()), move(elem.get_1()));
        }
    }

    map.buckets() := move(aux.buckets());
}

@doc(
    "Adds the (`key`, `value`) pair to `map`.",
    map: "HashMap to modify",
    key: "`key` to add",
    value: "`value` to add",
    "Nothing."
)
fn<K, V> add(map: @HashMap<'K [Hashable], 'V>, key: 'K, value: 'V) {
    let b = map.buckets();
    let size = b.len();
    let pos = hash(*key) % size;
    let bucket = b[*pos];

    let idx = -1;
    let i = -1;
    
    for p in bucket {
        if p.get_0() == key {
            idx := *i;
        }

        i.inc();
    }

    if idx == -1 {
        bucket.push((move(key), move(value)));
        map.num_elems().inc();

    } else {
        bucket.set((move(key), move(value)), *idx);
    }

    if bucket.len() > size {
        map.rehash();
    }
}

@doc(
    "Removes `key` from `map`.",
    map: "HashMap to modify",
    key: "`key` to remove",
    "Nothing."
)
fn<K, V> remove(map: @HashMap<'K [Hashable], 'V>, key: 'K) {
    let b = map.buckets();
    let size = b.len();
    let pos = hash(*key) % size;
    let bucket = b[*pos];

    let idx = -1;
    let i = 0;
    
    for p in bucket {
        if p.get_0() == key {
            idx := *i;
        }

        i.inc();
    }

    if idx != -1 {
        bucket.remove(*idx);
        map.num_elems().dec();
    }
}

@doc(
    "Gets the value associated to `key` in `map`.",
    map: "HashMap to fetch",
    key: "`key` to look for",
    "The associated value or an empty value."
)
fn<K, V> get(map: @HashMap<'K [Hashable], 'V>, key: @'K) -> () | @'V {
    let b = map.buckets();
    let size = b.len();
    let pos = hash(*key) % size;

    for i in b[*pos] {
        if i.get_0() == key {
            return i.get_1();
        }
    }

    return ();
}

@doc(
    "Checks whether or not `key` has an associated value in `map`.",
    map: "HashMap to fetch",
    key: "`key` to look for",
    "`true` if `map` contains `key`, else `false`."
)
fn<K, V> contains(map: @HashMap<'K [Hashable], 'V>, key: @'K) -> Bool {
    let b = map.buckets();
    let size = b.len();
    let pos = hash(*key) % size;

    for i in b[*pos] {
        if i.get_0() == key {
            return true;
        }
    }

    return false;
}

@doc(
    "Returns the number of elements in the `map`.",
    map: "HashMap to check",
    "The number of elements in the `map`."
)
fn<K, V> len(map: &HashMap<'K [Hashable], 'V>) -> Int {
    return *map.num_elems();
}

// Iterator

class HashMapIterator<K, V> {
    map: &HashMap<'K, 'V>;
    bucket: Int;
    idx: Int;
}

fn<K, V> iterator(it: HashMapIterator<'K, 'V>) -> HashMapIterator<'K, 'V> {
    return move(it);
}

fn<K, V> next(it: @HashMapIterator<'K, 'V>) -> ('K, 'V) {
    let b = it.bucket();
    let i = it.idx();
    let s = it.map();

    let curr_bucket = (s.buckets())[*b];
    let res = curr_bucket[*i];

    i.inc();

    if i == curr_bucket.len() {
        let num_buckets = s.buckets().len();
        i := 0;
        b := b + 1;

        while b < num_buckets {
            curr_bucket = (s.buckets())[*b];

            if curr_bucket.len() > 0 {
                return *res;
            }

            b := b + 1;
        }
    }

    return *res;
}

fn<K, V> is_consumed(it: @HashMapIterator<'K, 'V>) -> Bool {
    return it.bucket() == it.map().buckets().len();
}

fn<K, V> iterator(map: &HashMap<'K, 'V>) -> HashMapIterator<'K, 'V> {
    let idx = 0;

    // Get first nonempty bucket
    for bucket in map.buckets() {
        if bucket.len() > 0 {
            return HashMapIterator(map, *idx, 0);
        }

        idx.inc();
    }

    return HashMapIterator(map, 0, 0);
}

fn<K, V> iterator(map: @HashMap<'K, 'V>) -> HashMapIterator<'K, 'V> {
    return iterator(map.demut());
}

implement<K, V> Iterable<HashMapIterator<'K, 'V>, ('K, 'V)> for HashMapIterator<'K, 'V>;
implement<K, V> Iterable<HashMapIterator<'K, 'V>, ('K, 'V)> for @HashMap<'K, 'V>;
implement<K, V> Iterable<HashMapIterator<'K, 'V>, ('K, 'V)> for &HashMap<'K, 'V>;

// Printable interface

fn<K, V> print(map: &HashMap<'K [Printable], 'V [Printable]>) {
    let idx = 0;

    print("{");

    for i in map {
        print(*i.get_0());
        print(": ");
        print(*i.get_1());

        idx.inc();

        if idx < map.len() {
            print(", ");
        }
    }

    print("}");
}

fn<K, V> print(map: @HashMap<'K [Printable], 'V [Printable]>) {
    print(map.demut());
}

implement<K, V> Printable for @HashMap<'K [Printable], 'V [Printable]>;
implement<K, V> Printable for &HashMap<'K [Printable], 'V [Printable]>;

/*
    UNIT TESTS
*/

@test
fn hashmap_syntax_test() -> Bool {
    let res = <Int, String>{
        1: "Test 1",
        7: "Test 2",
        2: "Test 3"
    };
    
    return res.contains(1.mut()) && res.get(1.mut()).as<@String>() == "Test 1" &&
           res.contains(2.mut()) && res.get(2.mut()).as<@String>() == "Test 3" &&
           res.contains(7.mut()) && res.get(7.mut()).as<@String>() == "Test 2";
}

@test
fn hashmap_add_test() -> Bool {
    let res = hashmap<Int, String>();

    for i in range(100) {
        res.add(*i, "Test " + i.deref().to_string());
    }

    for i in range(100) {
        if !res.contains(i) {
            return false;
        }
    }
    
    return true;
}

@test
fn hashmap_remove_test() -> Bool {
    let res = hashmap<Int, String>();

    for i in range(100) {
        res.add(*i, "Test " + i.deref().to_string());
    }

    for i in range(50, 100) {
        res.remove(*i);
    }

    for i in range(50) {
        if !res.contains(i) {
            return false;
        }
    }

    for i in range(50, 100) {
        if res.contains(i) {
            return false;
        }
    }
    
    return true;
}
