import interface Hashable from hash;
import fn hash from hash;
import fn { iterator, next, is_consumed, range } from range;
import * from array_extensions;

// Syntax

@doc(
    "Hash Set initialization syntax."
)
syntax hashset_initialization from "<" [s] Arg(<type>, type) [s] ">" [s] "{" [s] [{Arg(<expr>, elems) "," [s]} Arg(<expr>, elems)] [s] "}" {
    let res = hashset<$type>();

    @elems.i {
        res.add($elems.i);
    }
    
    return move(res);
}

// Class definition

@doc(
    "Hash Set class."
)
class HashSet<V> {
    buckets: Array<Array<'V [Hashable]>>;
    num_elems: Int;
}

fn<T> init(set: @HashSet<'T [Hashable]>, size: Int) {
    let _buckets = set.buckets();
    _buckets.reserve(*size);

    for i in range(0, *size) {
        _buckets.push(arr<'T>());
    }
}

@doc(
    "Create empty Hash Set. Use this instead of HashSet's constructor.",
    "An empty Hash Set"
)
fn<T> hashset() -> HashSet<'T [Hashable]> {
    let res = HashSet(arr<Array<'T>>(), 0);
    res.init(10);

    return move(res);
}

fn<T> rehash(set: @HashSet<'T [Hashable]>) {
    let b = set.buckets();
    let size = b.len();

    let aux = HashSet(arr<Array<'T>>(), 0);
    aux.init(size * 2);

    for bucket in set.buckets() {
        for elem in bucket {
            aux.add(move(elem));
        }
    }

    set.buckets() := move(aux.buckets());
}

@doc(
    "Adds `elem` to `set`.",
    set: "HashSet to modify",
    elem: "element to add",
    "Nothing."
)
fn<T> add(set: @HashSet<'T [Hashable]>, elem: 'T) {
    let b = set.buckets();
    let size = b.len();
    let pos = abs(hash(*elem)) % size;
    let bucket = b[*pos];

    if !bucket.demut().contains(elem.demut()) {
        bucket.push(move(elem));
        set.num_elems().inc();
    }

    if b[*pos].len() > size {
        set.rehash();
    }
}

@doc(
    "Removes `elem` from `set`.",
    set: "HashSet to modify",
    elem: "element to remove",
    "Nothing."
)
fn<T> remove(set: @HashSet<'T [Hashable]>, elem: &'T) {
    let b = set.buckets();
    let pos = abs(hash(*elem)) % b.len();
    let bucket = b[*pos];
    let idx = bucket.demut().index_of(elem);

    if idx != -1 {
        bucket.remove(*idx);
        set.num_elems().dec();
    }
}

@doc(
    "Checks whether or not `elem` is in `set`.",
    set: "HashSet to fetch",
    elem: "`elem` to look for",
    "`true` if `set` contains `elem`, else `false`."
)
fn<T> contains(set: &HashSet<'T [Hashable]>, elem: &'T) -> Bool {
    let b = set.buckets();
    let size = b.len();
    let pos = abs(hash(*elem)) % size;

    for i in b[*pos] {
        if i == elem {
            return true;
        }
    }

    return false;
}

@doc(
    "Returns the number of elements in `set`.",
    set: "HashSet to check",
    "The number of elements in `set`."
)
fn<T> len(set: &HashSet<'T [Hashable]>) -> Int {
    return *set.num_elems();
}

// Iterator

class HashSetIterator<T> {
    set: &HashSet<'T>;
    bucket: Int;
    idx: Int;
}

fn<T> iterator(it: HashSetIterator<'T>) -> HashSetIterator<'T> {
    return move(it);
}

fn<T> next(it: @HashSetIterator<'T>) -> 'T {
    let b = it.bucket();
    let i = it.idx();
    let s = it.set();

    let curr_bucket = (s.buckets())[*b];
    let res = curr_bucket[*i];

    i.inc();

    if i == curr_bucket.len() {
        let num_buckets = s.buckets().len();
        i := 0;
        b := b + 1;

        while b < num_buckets {
            curr_bucket = (s.buckets())[*b];

            if curr_bucket.len() > 0 {
                return *res;
            }

            b := b + 1;
        }
    }

    return *res;
}

fn<T> is_consumed(it: @HashSetIterator<'T>) -> Bool {
    return it.bucket() == it.set().buckets().len();
}

fn<T> iterator(set: &HashSet<'T>) -> HashSetIterator<'T> {
    let idx = 0;

    // Get first nonempty bucket
    for bucket in set.buckets() {
        if bucket.len() > 0 {
            return HashSetIterator(set, *idx, 0);
        }

        idx.inc();
    }

    return HashSetIterator(set, 0, 0);
}

fn<T> iterator(set: @HashSet<'T>) -> HashSetIterator<'T> {
    return iterator(set.demut());
}

implement<T> Iterable<HashSetIterator<'T>, 'T> for HashSetIterator<'T>;
implement<T> Iterable<HashSetIterator<'T>, 'T> for @HashSet<'T>;
implement<T> Iterable<HashSetIterator<'T>, 'T> for &HashSet<'T>;

// Printable interface

fn<T> print(set: &HashSet<'T [Printable]>) {
    let idx = 0;

    print("{");

    for i in set {
        print(*i);

        idx.inc();

        if idx < set.len() {
            print(", ");
        }
    }

    print("}");
}

fn<T> print(set: @HashSet<'T [Printable]>) {
    print(set.demut());
}

implement<T> Printable for @HashSet<'T [Printable]>;
implement<T> Printable for &HashSet<'T [Printable]>;

/*
    UNIT TESTS
*/

@test
fn hashset_syntax_test() -> Bool {
    let res = <Int>{1, 7, 2};
    
    return res.demut().contains(1.ref()) && res.demut().contains(2.ref()) && res.demut().contains(7.ref());
}

@test
fn hashset_add_test() -> Bool {
    let res = hashset<Int>();

    for i in range(100) {
        res.add(*i);
    }

    for i in range(100) {
        if !res.demut().contains(i.demut()) {
            return false;
        }
    }
    
    return true;
}

@test
fn hashset_remove_test() -> Bool {
    let res = hashset<Int>();

    for i in range(100) {
        res.add(*i);
    }

    for i in range(50, 100) {
        res.remove(i.demut());
    }

    for i in range(50) {
        if !res.demut().contains(i.demut()) {
            return false;
        }
    }

    for i in range(50, 100) {
        if res.demut().contains(i.demut()) {
            return false;
        }
    }
    
    return true;
}