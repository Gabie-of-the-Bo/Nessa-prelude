import * from range;

// Construction syntax

@doc(
    "Array initialization syntax."
)
syntax array_initialization from "<" [s] Arg(<type>, type) [s] ">" [s] "[" [s] [{Arg(<expr>, elems) "," [s]} Arg(<expr>, elems)] [s] "]" {
    let res = arr<$type>();

    @elems.i {
        res.push($elems.i);
    }
    
    return move(res);
}

@doc(
    "List comprehension syntax."
)
syntax list_comprehension from "[" [s] Arg(<expr>, map) [s] "for" [s] Arg(<ident>, it) [s] ":" [s] Arg(<type>, type) [s] "in" [s] Arg(<expr>, container) [s] "]" {
    let res = arr<$type>();
    let func = ($it: $type) -> $type $map;

    for _it_ in $container {
        res.push(func(*_it_));
    \}
    
    return move(res);
}

// Algorithms
@doc(
    "Returns an array with pre-allocated size. Equivalent to using `reserve` on an already created array.",
    size: "the number of positions to pre-allocate.",
    "An array with `size` pre-allocated positions."
)
fn<T> arr_with_capacity(size: Int) -> Array<'T> {
    let res = arr<'T>();
    res.reserve(move(size));
    
    return move(res);
}

@doc(
    "Fills every available position in an array with a given value. The filling starts in the current `len`.",
    array: "the array to fill.",
    value: "the value to fill the available positions with.",
    "An array where every position starting from the previous `len` is `value`."
)
fn<T> fill(array: @Array<'T>, value: 'T) -> @Array<'T> {
    while array.capacity() > array.len() {
        array.push(*value);
    }

    return array;
}

@doc(
    "Fills every available position in an array using a lambda expression. The filling starts in the current `len`.",
    array: "the array to fill.",
    f: "the function that will be used to fill the available positions, given the item index as a parameter.",
    "An array where every position starting from the previous `len` is the result of executing `f`."
)
fn<T> fill_with(array: @Array<'T>, f: Int => 'T) -> @Array<'T> {
    let idx = array.len();

    while array.capacity() > array.len() {
        array.push(f(*idx));
        idx.inc();
    }

    return array;
}

@doc(
    "Deletes the items in the range [`from_idx`, `to_idx`).",
    array: "the array to modify.",
    from_idx: "the lower index of the deletion range.",
    to_idx: "the upper index of the deletion range.",
    "An array where those positions were deleted."
)
fn<T> remove_range(array: @Array<'T>, from_idx: Int, to_idx: Int) {
    let length = array.len();
    let res = arr_with_capacity<'T>(length - (to_idx - from_idx));

    let i = 0;

    while i < from_idx {
        res.push(fwd<'T>(array[*i]));
        i.inc();
    }

    i = *to_idx;

    while i < length {
        res.push(fwd<'T>(array[*i]));
        i.inc();
    }

    array := move(res);
}

@doc(
    "Pushes all the elements of `other` into `array`.",
    array: "the array to modify.",
    other: "the array whose elements you want to add.",
    "Nothing."
)
fn<T> push_all(array: @Array<'T>, other: Array<'T>) {
    array.reserve(array.len() + other.len());

    for i in other {
        array.push(fwd<'T>(i));
    }
}

@doc(
    "Splits `array` into two halves with the first `idx` elements and the rest.",
    array: "the array to modify. This will hold the first `idx` elements.",
    idx: "the position where to split `array`.",
    "An array containing the last elements."
)
fn<T> split(array: @Array<'T>, idx: Int) -> Array<'T> {
    let length = array.len();
    let head = arr_with_capacity<'T>(*idx);
    let tail = arr_with_capacity<'T>(length - idx);

    // Head
    let i = 0;

    while i < idx {
        head.push(fwd<'T>(array[*i]));
        i.inc();
    }

    // Tail
    i = *idx;

    while i < length {
        tail.push(fwd<'T>(array[*i]));
        i.inc();
    }

    array := move(head);

    return move(tail);
}

@doc(
    "Inserts all the elements of `other` into `array` at position `idx`.",
    array: "the array to modify.",
    other: "the array whose elements you want to add.",
    idx: "the position where to insert the elements.",
    "Nothing."
)
fn<T> insert_all(array: @Array<'T>, other: Array<'T>, idx: Int) {
    let tail = array.split(*idx);
    array.push_all(move(other));
    array.push_all(move(tail));
}

@doc(
    "Checks whether or not `array` contains `elem`.",
    array: "the array to modify.",
    elem: "the element to check.",
    "`true` if `array` contains `elem`, else `false`."
)
fn<T> contains(array: &Array<'T>, elem: &'T) -> Bool {
    for i in array {
        if i == elem {
            return true;
        }
    }

    return false;
}

@doc(
    "Returns the index of `elem` in `array`.",
    array: "the array to modify.",
    elem: "the element to look for.",
    "The index of index of `elem` in `array` or -1 if it does not exist."
)
fn<T> index_of(array: &Array<'T>, elem: &'T) -> Int {
    let idx = 0;

    for i in array {
        if i == elem {
            return move(idx);
        }

        idx.inc();
    }

    return -1;
}

@doc(
    "Transform the elements of `array` using `f`.",
    array: "the array to transform.",
    f: "the function to use to transform the elements.",
    "The transformed array."
)
fn<T, G> transform(array: @Array<'T>, f: 'T => 'G) -> Array<'G> {
    let res = arr_with_capacity<'G>(array.len());

    for i in array {
        res.push(f(*i));
    }

    return move(res);
}

@doc(
    "Transform the elements of `array` using `f`. The same array will be used.",
    array: "the array to transform.",
    f: "the function to use to transform the elements.",
    "The transformed array."
)
fn<T> transform_inplace(array: @Array<'T>, f: 'T => 'T) -> @Array<'T> {
    for i in array {
        i := f(*i);
    }

    return array;
}

@doc(
    "Keep the elements of `array` that make `f` return `true`.",
    array: "the array to transform.",
    f: "the function to use to check whether or not to keep the elements.",
    "The filtered array."
)
fn<T> retain(array: @Array<'T>, f: 'T => Bool) -> @Array<'T> {
    let res = arr_with_capacity<'T>(array.len());

    for i in array {
        if f(*i) {
            res.push(fwd<'T>(i));
        }
    }

    array := move(res);

    return array;
}

@doc(
    "Reverse the order of the elements of `array`.",
    array: "the array to reverse.",
    "The reversed array."
)
fn<T> reverse(array: @Array<'T>) -> @Array<'T> {
    let length = array.len();
    let half = length / 2;
    let i = 0;
    
    while i < half {
        swap(array[*i], array[length - i - 1]);
        i.inc();
    }

    return array;
}

@doc(
    "Reduce the elements of `array` using the binary function `op` and a base element `base`.",
    array: "the array to reduce.",
    operation: "the binary operation to use.",
    base: "The base element. For example, this would be 0 for sums and 1 for products.",
    "The result of the reduction."
)
fn<T> reduce(array: @Array<'T>, base: 'T, operation: ('T, 'T) => 'T) -> 'T {
    for i in array {
        base := operation(*base, *i);
    }

    return move(base);
}

fn<T> partition(array: @Array<'T>, low: Int, high: Int) -> Int {
    let pivot = *low;

    for i in range(low + 1, *high) {
        if array[*i] <= array[*low] {
            pivot.inc();

            if i != pivot {
                swap(array[*i], array[*pivot]);
            }
        }
    }

    if pivot != low {
        swap(array[*pivot], array[*low]);
    }

    return *pivot;
}

fn<T> partition_by(array: @Array<'T>, low: Int, high: Int, crit: (&'T) => Float) -> Int {
    let pivot = *low;

    for i in range(low + 1, *high) {
        if crit(array[*i].demut()) <= crit(array[*low].demut()) {
            pivot.inc();

            if i != pivot {
                swap(array[*i], array[*pivot]);
            }
        }
    }

    if pivot != low {
        swap(array[*pivot], array[*low]);
    }

    return *pivot;
}

fn<T> quicksort_rec(array: @Array<'T>, low: Int, high: Int) {
    if low < high {
        let pi = partition(array, *low, *high);

        quicksort_rec(array, *low, *pi);
        quicksort_rec(array, *pi + 1, *high);
    }
}

fn<T> quicksort_rec_by(array: @Array<'T>, low: Int, high: Int, crit: (&'T) => Float) {
    if low < high {
        let pi = partition_by(array, *low, *high, *crit);

        quicksort_rec_by(array, *low, *pi, *crit);
        quicksort_rec_by(array, *pi + 1, *high, *crit);
    }
}

@doc(
    "Sort the elements of `array` by natural order.",
    array: "the array to sort.",
    "Nothing."
)
fn<T> sort(array: @Array<'T>) {
    quicksort_rec(array, 0, array.len());
}

@doc(
    "Sort the elements of `array` using `crit`.",
    array: "the array to sort.",
    crit: "the criterion to use, a function that returns a Float.",
    "Nothing."
)
fn<T> sort_by(array: @Array<'T>, crit: (&'T) => Float) {
    quicksort_rec_by(array, 0, array.len(), *crit);
}

// Printable interface

fn<T> print(array: Array<'T [Printable]>) {
    let idx = 0;

    print("[");

    for i in array {
        print(*i);

        idx.inc();

        if idx < array.len() {
            print(", ");
        }
    }

    print("]");
}

implement<T> Printable for Array<'T [Printable]>;

/*
    UNIT TESTS
*/

@test
fn fill_test() -> Bool {
    let res = arr_with_capacity<Int>(3);
    res.fill(100);

    for i in res {
        if i != 100 {
            return false;
        }
    }

    return true;
}

@test
fn fill_with_test() -> Bool {
    let res = arr_with_capacity<Int>(3);
    res.fill_with((idx: Int) -> Int 100);

    for i in res {
        if i != 100 {
            return false;
        }
    }

    return true;
}

@test
fn push_all_test() -> Bool {
    let a = arr_with_capacity<Int>(3);
    a.fill_with((idx: Int) -> Int 1);
    let b = arr_with_capacity<Int>(3);
    b.fill_with((idx: Int) -> Int 2);

    a.push_all(move(b));

    return a[0] == 1 && a[1] == 1 && a[2] == 1 &&
           a[3] == 2 && a[4] == 2 && a[5] == 2;
}

@test
fn insert_all_test() -> Bool {
    let a = arr_with_capacity<Int>(3);
    a.fill_with((idx: Int) -> Int 1);
    let b = arr_with_capacity<Int>(3);
    b.fill_with((idx: Int) -> Int 2);

    a.insert_all(move(b), 1);

    return a[0] == 1 && a[1] == 2 && a[2] == 2 &&
           a[3] == 2 && a[4] == 1 && a[5] == 1;
}

@test
fn contains_test() -> Bool {
    let res = arr_with_capacity<Int>(3);
    
    res.push(0);
    res.push(5);
    res.push(80);

    return res.demut().contains(0.ref()) && res.demut().contains(5.ref()) && res.demut().contains(80.ref()) &&
           !res.demut().contains(1.ref()) && !res.demut().contains(6.ref());
}

@test
fn index_of_test() -> Bool {
    let res = arr_with_capacity<Int>(3);
    
    res.push(0);
    res.push(5);

    return res.demut().index_of(0.ref()) == 0 && res.demut().index_of(5.ref()) == 1 &&
           res.demut().index_of(2.ref()) == -1;
}

@test
fn transform_test() -> Bool {
    let res = arr_with_capacity<Int>(3);
    
    res.push(0);
    res.push(5);
    res.push(7);

    let res_t = res.transform((i: Int) i * 2);
    
    return res_t[0] == 0 && res_t[1] == 10 && res_t[2] == 14;
}

@test
fn transform_inplace_test() -> Bool {
    let res = arr_with_capacity<Int>(3);
    
    res.push(0);
    res.push(5);
    res.push(7);

    res.transform_inplace((i: Int) i * 2);
    
    return res[0] == 0 && res[1] == 10 && res[2] == 14;
}

@test
fn retain_test() -> Bool {
    let res = arr_with_capacity<Int>(3);
    
    res.push(0);
    res.push(4);
    res.push(7);

    res.retain((i: Int) i % 2 == 0);
    
    return res.len() == 2 && res[0] == 0 && res[1] == 4;
}

@test
fn reverse_test() -> Bool {
    let res = arr_with_capacity<Int>(3);
    
    res.push(0);
    res.push(4);
    res.push(7);

    res.reverse();
    
    return res[0] == 7 && res[1] == 4 && res[2] == 0;
}

@test
fn reduce_test() -> Bool {
    let res = arr_with_capacity<Int>(3);
    
    res.push(5);
    res.push(4);
    res.push(7);
    
    let sum = res.reduce(0, (a: Int, b: Int) a + b);
    let prod = res.reduce(1, (a: Int, b: Int) a * b);
    
    return sum == 16 && prod == 140;
}

@test
fn sort_test() -> Bool {
    let res = arr_with_capacity<Int>(3);
    
    res.push(5);
    res.push(4);
    res.push(7);
    
    res.sort();
    
    return res[0] == 4 && res[1] == 5 && res[2] == 7;
}